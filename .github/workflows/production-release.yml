name: Production Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
        default: '1.0.0'
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        options:
          - stable
          - beta
          - alpha
        default: 'stable'
      create_tag:
        description: 'Create and push version tag'
        required: false
        type: boolean
        default: false

env:
  JAVA_VERSION: '24'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  # Job 1: Validate and prepare release
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      release_notes: ${{ steps.release_notes.outputs.content }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            
            if [ -z "$VERSION" ]; then
              echo "❌ Version not provided in workflow dispatch"
              exit 1
            fi
            
            if [ "${{ github.event.inputs.create_tag }}" = "true" ]; then
              TAG_NAME="v$VERSION"
              echo "Creating and pushing tag: $TAG_NAME"
              
              # Configure git and create tag
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              
              if git tag -a "$TAG_NAME" -m "Release $TAG_NAME"; then
                echo "✅ Created tag: $TAG_NAME"
                
                if git push origin "$TAG_NAME"; then
                  echo "✅ Pushed tag: $TAG_NAME"
                else
                  echo "❌ Failed to push tag: $TAG_NAME"
                  exit 1
                fi
              else
                echo "❌ Failed to create tag: $TAG_NAME"
                exit 1
              fi
            else
              TAG_NAME="v$VERSION"
              echo "Using existing tag: $TAG_NAME"
            fi
          else
            # Extract from tag
            TAG_NAME="${{ github.ref_name }}"
            VERSION="${TAG_NAME#v}"  # Remove 'v' prefix
            
            if [ -z "$TAG_NAME" ] || [ "$TAG_NAME" = "$VERSION" ]; then
              echo "❌ Invalid tag format: $TAG_NAME"
              exit 1
            fi
            
            echo "Extracted from tag - Tag: $TAG_NAME, Version: $VERSION"
          fi
          
          # Determine if this is a prerelease
          if [[ "$VERSION" =~ (alpha|beta|rc|pre|snapshot) ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "✅ Version extraction completed:"
          echo "   Version: $VERSION"
          echo "   Tag: $TAG_NAME"
          echo "   Is Prerelease: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # More flexible version validation - accept common formats
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]] && \
             [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Warning: Version format '$VERSION' doesn't match expected patterns"
            echo "Expected formats: X.Y.Z, X.Y.Z-suffix, vX.Y.Z, vX.Y.Z-suffix"
            echo "Continuing with potentially non-standard version format..."
          else
            echo "Version format is valid: $VERSION"
          fi

      - name: Update version in pom.xml
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "Updating pom.xml version to $VERSION..."
          
          # Check if pom.xml exists
          if [ ! -f "pom.xml" ]; then
            echo "❌ pom.xml not found"
            exit 1
          fi
          
          # Update main version
          if sed -i.bak "s/<version>[^<]*<\\/version>/<version>$VERSION<\\/version>/" pom.xml; then
            echo "✅ Updated main version in pom.xml"
          else
            echo "⚠️  Failed to update main version in pom.xml"
          fi
          
          # Update app.version property
          if sed -i.bak "s/<app\\.version>[^<]*<\\/app\\.version>/<app.version>$VERSION<\\/app.version>/" pom.xml; then
            echo "✅ Updated app.version property in pom.xml"
          else
            echo "⚠️  Failed to update app.version property in pom.xml"
          fi
          
          # Update all jpackage app-version arguments
          if sed -i.bak "s/--app-version [0-9A-Za-z.-]*/--app-version $VERSION/g" pom.xml; then
            echo "✅ Updated jpackage app-version arguments in pom.xml"
          else
            echo "⚠️  Failed to update jpackage app-version arguments in pom.xml"
          fi
          
          rm -f pom.xml.bak
          echo "✅ Version update completed for $VERSION"

      - name: Generate release notes
        id: release_notes
        run: |
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "Generating release notes for $VERSION..."
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to $TAG_NAME"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD 2>/dev/null || echo "- Release notes generation failed")
          else
            echo "No previous tag found, generating full changelog"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20 2>/dev/null || echo "- Release notes generation failed")
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## PDF Utilities $VERSION
          
          ### What's New
          $CHANGELOG
          
          ### Installation
          Download the appropriate installer for your operating system from the individual files below.
          
          ### System Requirements
          - Java 24 or higher
          - Windows 10+, macOS 10.14+, or Linux (Ubuntu 18.04+)
          
          ### Available Installers
          - **Windows**: PDF-Utilities-${VERSION}-Windows-*.msi
          - **macOS**: PDF-Utilities-${VERSION}-macOS-*.dmg
          - **Linux**:
            - PDF-Utilities-${VERSION}-Linux-*.deb (Debian/Ubuntu)
            - PDF-Utilities-${VERSION}-Linux-*.rpm (Fedora/RHEL)
            - PDF-Utilities-${VERSION}-Linux-*.AppImage (Portable)
          
          ---
          *This release was automatically generated from commit ${{ github.sha }}*
          EOF
          
          if [ -f "release_notes.md" ]; then
            echo "✅ Release notes generated successfully"
          else
            echo "❌ Failed to generate release notes"
            exit 1
          fi
          
          # Output the content
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Job 2: Build for all platforms
  build-all-platforms:
    needs: prepare-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact-name: PDF-Utilities-Linux
            output-path: target/installers/*
          - os: macos-latest
            platform: macos
            artifact-name: PDF-Utilities-macOS
            output-path: target/installers/*
          - os: windows-latest
            platform: windows
            artifact-name: PDF-Utilities-Windows
            output-path: target/installers/*
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Debug Maven dependencies and versions
        run: |
          echo "=== Maven and Java Environment Debug Info ==="
          echo "Maven version:"
          mvn --version
          echo ""
          echo "Java version:"
          java -version
          echo ""
          echo "=== Maven Effective POM (plugins section) ==="
          mvn help:effective-pom -Doutput=effective-pom.xml
          grep -A 20 -B 5 "maven-antrun-plugin" effective-pom.xml || echo "maven-antrun-plugin not found in effective POM"
          echo ""
          echo "=== Maven Dependency Tree for antrun plugin ==="
          mvn dependency:tree -Dincludes=org.apache.maven.plugins:maven-antrun-plugin | head -20
          echo ""
          echo "=== Maven Local Repository Status ==="
          echo "Maven antrun plugin in local repo:"
          find ~/.m2/repository -name "*antrun*" -type d | head -10
          echo ""
          echo "=== Maven Settings ==="
          if [ -f ~/.m2/settings.xml ]; then
            echo "Maven settings.xml exists:"
            ls -la ~/.m2/settings.xml
            echo "Settings content:"
            cat ~/.m2/settings.xml
          else
            echo "No Maven settings.xml found"
          fi
          echo ""
          echo "=== Maven Plugin List ==="
          mvn help:all-profiles | head -30
          echo ""
          echo "Debug info collection completed"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Update version in pom.xml
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          echo "Updating pom.xml version to $VERSION for ${{ matrix.platform }}..."
          
          # Check if pom.xml exists
          if [ ! -f "pom.xml" ]; then
            echo "❌ pom.xml not found"
            exit 1
          fi
          
          # Update main version
          if sed -i.bak "s/<version>[^<]*<\\/version>/<version>$VERSION<\\/version>/" pom.xml; then
            echo "✅ Updated main version in pom.xml"
          else
            echo "⚠️  Failed to update main version in pom.xml"
          fi
          
          # Update app.version property
          if sed -i.bak "s/<app\\.version>[^<]*<\\/app\\.version>/<app.version>$VERSION<\\/app.version>/" pom.xml; then
            echo "✅ Updated app.version property in pom.xml"
          else
            echo "⚠️  Failed to update app.version property in pom.xml"
          fi
          
          # Update all jpackage app-version arguments
          if sed -i.bak "s/--app-version [0-9A-Za-z.-]*/--app-version $VERSION/g" pom.xml; then
            echo "✅ Updated jpackage app-version arguments in pom.xml"
          else
            echo "⚠️  Failed to update jpackage app-version arguments in pom.xml"
          fi
          
          rm -f pom.xml.bak
          echo "✅ Version update completed for $VERSION"

      - name: Build with Maven
        run: |
          echo "Building for ${{ matrix.platform }} platform..."
          
          # Set platform-specific jpackage properties
          if [ "${{ matrix.platform }}" = "windows" ]; then
            mvn clean install -DskipTests -Dskip.windows=false -Dskip.windows.exe=false
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            mvn clean install -DskipTests -Dskip.macos=false -Dskip.macos.pkg=false
          else
            mvn clean install -DskipTests -Dskip.ubuntu=false -Dskip.app.image=false
          fi
          
          if [ $? -ne 0 ]; then
            echo "❌ Maven build failed for ${{ matrix.platform }}"
            exit 1
          fi
          
          echo "✅ Maven build completed successfully for ${{ matrix.platform }}"

      - name: Create installers
        run: |
          echo "Creating installers for ${{ matrix.platform }}..."
          
          if [ "${{ matrix.platform }}" = "windows" ]; then
            cmd /c package-app.bat
          else
            chmod +x package-app.sh
            ./package-app.sh
          fi
          
          if [ $? -ne 0 ]; then
            echo "❌ Package creation failed for ${{ matrix.platform }}"
            exit 1
          fi
          
          echo "✅ Package creation completed successfully for ${{ matrix.platform }}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}-${{ needs.prepare-release.outputs.version }}
          path: ${{ matrix.output-path }}
          retention-days: 30

      - name: Debug build output
        run: |
          if [ -d "target/installers" ]; then
            echo "Build artifacts created:"
            find target/installers -type f -name "*" | head -20
          else
            echo "No installers directory found"
          fi

  # Job 3: Create GitHub Release
  create-release:
    needs: [prepare-release, build-all-platforms]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release packages
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          mkdir -p release-packages
          
          echo "Processing artifacts for release..."
          
          # Simple approach: copy all artifacts with clean names
          for platform_dir in artifacts/*/; do
            platform=$(basename "$platform_dir")
            echo "Processing $platform artifacts..."
            
            if [ -d "$platform_dir" ]; then
              # Find all installer files and copy them with simple names
              find "$platform_dir" -type f \( -name "*.msi" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.exe" \) | while read -r file; do
                filename=$(basename "$file")
                extension="${filename##*.}"
                
                # Create simple, clean filename
                case "$platform" in
                  "PDF-Utilities-Linux"*)
                    platform_name="Linux"
                    ;;
                  "PDF-Utilities-macOS"*)
                    platform_name="macOS"
                    ;;
                  "PDF-Utilities-Windows"*)
                    platform_name="Windows"
                    ;;
                  *)
                    platform_name="$platform"
                    ;;
                esac
                
                clean_filename="PDF-Utilities-${VERSION}-${platform_name}.${extension}"
                cp "$file" "release-packages/$clean_filename"
                echo "✓ Prepared: $clean_filename"
              done
            fi
          done
          
          echo "Release packages prepared:"
          ls -la release-packages/

      - name: Create GitHub Release
        run: |
          # Create release notes file
          echo "${{ needs.prepare-release.outputs.release_notes }}" > release_notes.md
          
          # Determine if this is a prerelease
          if [ "${{ needs.prepare-release.outputs.is_prerelease }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          else
            PRERELEASE_FLAG=""
          fi
          
          # Create the GitHub release
          gh release create ${{ needs.prepare-release.outputs.tag_name }} \
            --title "PDF Utilities ${{ needs.prepare-release.outputs.version }}" \
            --notes-file release_notes.md \
            $PRERELEASE_FLAG \
            --latest

      - name: Upload Release Assets
        run: |
          # Upload all files in release-packages directory
          if [ -d "release-packages" ] && [ "$(ls -A release-packages)" ]; then
            echo "Uploading release assets..."
            gh release upload ${{ needs.prepare-release.outputs.tag_name }} release-packages/*
            
            if [ $? -eq 0 ]; then
              echo "✓ Successfully uploaded all release assets"
            else
              echo "✗ Failed to upload release assets"
              exit 1
            fi
          else
            echo "✗ No release packages found to upload"
            exit 1
          fi

  # Job 4: Post-release tasks
  post-release:
    needs: [prepare-release, create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update development version
        if: needs.prepare-release.outputs.is_prerelease == 'false'
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          # Extract major.minor.patch and increment patch
          IFS='.' read -r major minor patch <<< "$VERSION"
          NEW_VERSION="$major.$minor.$((patch + 1))-SNAPSHOT"
          
          echo "Updating development version to $NEW_VERSION"
          
          # Update version in pom.xml for next development cycle
          sed -i.bak "s/<version>.*<\\/version>/<version>$NEW_VERSION<\\/version>/" pom.xml
          sed -i.bak "s/<app\\.version>.*<\\/app\\.version>/<app.version>$NEW_VERSION<\\/app.version>/" pom.xml
          sed -i.bak "s/--app-version [0-9A-Za-z.-]*/--app-version $NEW_VERSION/g" pom.xml
          rm -f pom.xml.bak
          
          # Commit and push the version update
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pom.xml
          git commit -m "Bump version to $NEW_VERSION for next development cycle" || echo "No changes to commit"
          git push origin main || echo "Failed to push version update"

      - name: Release Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.prepare-release.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: ${{ needs.prepare-release.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          
          # Note: GitHub CLI doesn't provide the release URL in outputs like the old action did
          echo "- **Status**: Release workflow completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Downloads" >> $GITHUB_STEP_SUMMARY
          echo "Individual platform installers are available as separate download files:" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows**: MSI installer" >> $GITHUB_STEP_SUMMARY
          echo "- **macOS**: DMG installer" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux**: DEB package, RPM package, and AppImage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Release workflow completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "Each installer is uploaded as a separate file for easy download and installation." >> $GITHUB_STEP_SUMMARY
