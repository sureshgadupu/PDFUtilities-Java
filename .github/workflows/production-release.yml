name: Production Release

on:
  push:
    tags:
      - "v*.*.*" # Triggers on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string
        default: "1.0.0"
      release_type:
        description: "Type of release"
        required: true
        type: choice
        options:
          - stable
          - beta
          - alpha
        default: "stable"
      create_tag:
        description: "Create and push version tag"
        required: false
        type: boolean
        default: false

env:
  JAVA_VERSION: "24"
  MAVEN_OPTS: "-Xmx1024m"

jobs:
  # Job 1: Validate and prepare release
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      release_notes: ${{ steps.release_notes.outputs.content }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for changelog generation

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            
            if [ -z "$VERSION" ]; then
              echo "❌ Version not provided in workflow dispatch"
              exit 1
            fi
            
            if [ "${{ github.event.inputs.create_tag }}" = "true" ]; then
              TAG_NAME="v$VERSION"
              echo "Creating and pushing tag: $TAG_NAME"
              
              # Configure git and create tag
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              
              if git tag -a "$TAG_NAME" -m "Release $TAG_NAME"; then
                echo "✅ Created tag: $TAG_NAME"
                
                if git push origin "$TAG_NAME"; then
                  echo "✅ Pushed tag: $TAG_NAME"
                else
                  echo "❌ Failed to push tag: $TAG_NAME"
                  exit 1
                fi
              else
                echo "❌ Failed to create tag: $TAG_NAME"
                exit 1
              fi
            else
              TAG_NAME="v$VERSION"
              echo "Using existing tag: $TAG_NAME"
            fi
          else
            # Extract from tag
            TAG_NAME="${{ github.ref_name }}"
            VERSION="${TAG_NAME#v}"  # Remove 'v' prefix
            
            if [ -z "$TAG_NAME" ] || [ "$TAG_NAME" = "$VERSION" ]; then
              echo "❌ Invalid tag format: $TAG_NAME"
              exit 1
            fi
            
            echo "Extracted from tag - Tag: $TAG_NAME, Version: $VERSION"
          fi

          # Determine if this is a prerelease
          if [[ "$VERSION" =~ (alpha|beta|rc|pre|snapshot) ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

          echo "✅ Version extraction completed:"
          echo "   Version: $VERSION"
          echo "   Tag: $TAG_NAME"
          echo "   Is Prerelease: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # More flexible version validation - accept common formats
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]] && \
             [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Warning: Version format '$VERSION' doesn't match expected patterns"
            echo "Expected formats: X.Y.Z, X.Y.Z-suffix, vX.Y.Z, vX.Y.Z-suffix"
            echo "Continuing with potentially non-standard version format..."
          else
            echo "Version format is valid: $VERSION"
          fi

      - name: Update version in pom.xml
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          echo "Updating pom.xml version to $VERSION using temp file approach..."

          # Check if pom.xml exists
          if [ ! -f "pom.xml" ]; then
            echo "❌ pom.xml not found"
            exit 1
          fi

          # Create a backup
          cp pom.xml pom.xml.backup

          # Use a simpler, more reliable approach with sed
          # Update main project version - be very specific with context
          sed -i.bak 's|    <version>1\.0\.0</version>|    <version>'"$VERSION"'</version>|' pom.xml

          # Update app.version property - be very specific with context
          sed -i.bak 's|        <app\.version>1\.0\.0</app\.version>|        <app.version>'"$VERSION"'</app.version>|' pom.xml

          # Update all hardcoded app-version arguments in jpackage plugin configurations
          # This is more targeted and less likely to cause issues
          sed -i.bak 's|--app-version 1\.0\.0|--app-version '"$VERSION"'|g' pom.xml

          # Verify the changes
          if grep -q "<version>$VERSION</version>" pom.xml && \
             grep -q "<app.version>$VERSION</app.version>" pom.xml && \
             grep -q "<argument>--app-version</argument>" pom.xml && \
             grep -q "<argument>$VERSION</argument>" pom.xml; then
              echo "✅ Version update completed for $VERSION"
          else
              echo "❌ Version update verification failed, restoring backup"
              mv pom.xml.backup pom.xml
              exit 1
          fi

          # Clean up backup
          rm -f pom.xml.backup

      - name: Generate release notes
        id: release_notes
        run: |
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          VERSION="${{ steps.version.outputs.version }}"

          echo "Generating release notes for $VERSION..."

          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to $TAG_NAME"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD 2>/dev/null || echo "- Release notes generation failed")
          else
            echo "No previous tag found, generating full changelog"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20 2>/dev/null || echo "- Release notes generation failed")
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## PDF Utilities $VERSION

          ### What's New
          $CHANGELOG

          ### Installation
          Download the appropriate installer for your operating system from the individual files below.

          ### System Requirements
          - Java 24 or higher
          - Windows 10+, macOS 10.14+, or Linux (Ubuntu 18.04+)

          ### Available Installers
          - **Windows**: PDF-Utilities-${VERSION}-Windows-*.msi
          - **macOS**: PDF-Utilities-${VERSION}-macOS-*.dmg
          - **Linux**:
            - PDF-Utilities-${VERSION}-Linux-*.deb (Debian/Ubuntu)
            - PDF-Utilities-${VERSION}-Linux-*.rpm (Fedora/RHEL)
            - PDF-Utilities-${VERSION}-Linux-*.AppImage (Portable)

          ---
          *This release was automatically generated from commit ${{ github.sha }}*
          EOF

          if [ -f "release_notes.md" ]; then
            echo "✅ Release notes generated successfully"
          else
            echo "❌ Failed to generate release notes"
            exit 1
          fi

          # Output the content
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Job 2: Build for all platforms
  build-windows:
    needs: prepare-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Update version in pom.xml (Windows)
        shell: pwsh
        run: |
          $VERSION = "${{ needs.prepare-release.outputs.version }}"
          Write-Host "Updating pom.xml version to $VERSION for Windows using PowerShell..."

          if (-not (Test-Path pom.xml)) { Write-Error "pom.xml not found"; exit 1 }

          Copy-Item pom.xml pom.xml.backup -Force

          $lines = Get-Content pom.xml
          for ($i = 0; $i -lt $lines.Count; $i++) {
            $line = $lines[$i]
            if ($line -match '^    <version>1\.0\.0</version>$') {
              $lines[$i] = "    <version>$VERSION</version>"
            }
            elseif ($line -match '^        <app\.version>1\.0\.0</app\.version>$') {
              $lines[$i] = "        <app.version>$VERSION</app.version>"
            }
            elseif ($line -match '^\s{28}<argument>--app-version</argument>$') {
              if ($i + 1 -lt $lines.Count -and $lines[$i+1] -match '^\s{28}<argument>.*</argument>$') {
                $lines[$i+1] = "                                <argument>$VERSION</argument>"
              }
            }
          }
          $lines | Set-Content pom.xml -NoNewline

          # Verify
          $pom = Get-Content pom.xml -Raw
          if ($pom -match "<version>$VERSION</version>" -and $pom -match "<app.version>$VERSION</app.version>" -and $pom -match "<argument>--app-version</argument>\s*<argument>$VERSION</argument>") {
            Write-Host "✅ Version update completed for $VERSION"
          } else {
            Write-Host "❌ Version update verification failed, restoring backup"
            Move-Item -Force pom.xml.backup pom.xml
            exit 1
          }
          Remove-Item -Force pom.xml.backup

      - name: Build with Maven (Windows)
        shell: pwsh
        run: |
          mvn clean install "-DskipTests" "-Dskip.windows=false" "-Dskip.windows.exe=false"

      - name: Create installers (Windows)
        shell: pwsh
        run: |
          cmd /c package-app.bat

      - name: Upload build artifacts (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: PDF-Utilities-Windows-${{ needs.prepare-release.outputs.version }}
          path: target/installers/*
          retention-days: 30

  build-macos:
    needs: prepare-release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Update version in pom.xml (macOS)
        shell: bash
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          cp pom.xml pom.xml.backup
          awk -v version="$VERSION" '
          {
              if ($0 ~ /^    <version>1\.0\.0<\/version>$/) {
                  print "    <version>" version "</version>"
              } else {
                  print $0
              }
          }' pom.xml > pom.xml.tmp && mv pom.xml.tmp pom.xml

          awk -v version="$VERSION" '
          {
              if ($0 ~ /^        <app\.version>1\.0\.0<\/app\.version>$/) {
                  print "        <app.version>" version "</app.version>"
              } else {
                  print $0
              }
          }' pom.xml > pom.xml.tmp && mv pom.xml.tmp pom.xml

          awk -v version="$VERSION" '
          BEGIN { in_plugin = 0; in_exec_plugin = 0; in_arguments = 0 }
          {
              if ($0 ~ /<plugin>/) { in_plugin = 1 }
              else if (in_plugin && $0 ~ /<\/plugin>/) { in_plugin = 0; in_exec_plugin = 0 }
              else if (in_plugin && $0 ~ /<artifactId>exec-maven-plugin<\/artifactId>/) { in_exec_plugin = 1 }
              else if (in_exec_plugin && $0 ~ /<arguments>/) { in_arguments = 1 }
              else if (in_exec_plugin && in_arguments && $0 ~ /<\/arguments>/) { in_arguments = 0 }
              else if (in_exec_plugin && in_arguments && $0 ~ /<argument>--app-version<\/argument>/) {
                  print $0; getline; print "                                <argument>" version "</argument>"; next
              }
              print $0
          }' pom.xml > pom.xml.tmp && mv pom.xml.tmp pom.xml

          if grep -q "<version>$VERSION</version>" pom.xml && grep -q "<app.version>$VERSION</app.version>" pom.xml && grep -q "<argument>--app-version</argument>" pom.xml && grep -q "<argument>$VERSION</argument>" pom.xml; then
            echo "✅ Version update completed for $VERSION"
          else
            echo "❌ Version update verification failed, restoring backup"; mv pom.xml.backup pom.xml; exit 1
          fi
          rm -f pom.xml.backup

      - name: Build with Maven (macOS)
        shell: bash
        run: |
          mvn clean install -DskipTests -Dskip.macos=false -Dskip.macos.pkg=false

      - name: Create installers (macOS)
        shell: bash
        run: |
          chmod +x package-app.sh
          ./package-app.sh

      - name: Upload build artifacts (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: PDF-Utilities-macOS-${{ needs.prepare-release.outputs.version }}
          path: target/installers/*
          retention-days: 30

  build-linux:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Update version in pom.xml (Linux)
        shell: bash
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          cp pom.xml pom.xml.backup
          awk -v version="$VERSION" '
          {
              if ($0 ~ /^    <version>1\.0\.0<\/version>$/) {
                  print "    <version>" version "</version>"
              } else {
                  print $0
              }
          }' pom.xml > pom.xml.tmp && mv pom.xml.tmp pom.xml

          awk -v version="$VERSION" '
          {
              if ($0 ~ /^        <app\.version>1\.0\.0<\/app\.version>$/) {
                  print "        <app.version>" version "</app.version>"
              } else {
                  print $0
              }
          }' pom.xml > pom.xml.tmp && mv pom.xml.tmp pom.xml

          awk -v version="$VERSION" '
          BEGIN { in_plugin = 0; in_exec_plugin = 0; in_arguments = 0 }
          {
              if ($0 ~ /<plugin>/) { in_plugin = 1 }
              else if (in_plugin && $0 ~ /<\/plugin>/) { in_plugin = 0; in_exec_plugin = 0 }
              else if (in_plugin && $0 ~ /<artifactId>exec-maven-plugin<\/artifactId>/) { in_exec_plugin = 1 }
              else if (in_exec_plugin && $0 ~ /<arguments>/) { in_arguments = 1 }
              else if (in_exec_plugin && in_arguments && $0 ~ /<\/arguments>/) { in_arguments = 0 }
              else if (in_exec_plugin && in_arguments && $0 ~ /<argument>--app-version<\/argument>/) {
                  print $0; getline; print "                                <argument>" version "</argument>"; next
              }
              print $0
          }' pom.xml > pom.xml.tmp && mv pom.xml.tmp pom.xml

          if grep -q "<version>$VERSION</version>" pom.xml && grep -q "<app.version>$VERSION</app.version>" pom.xml && grep -q "<argument>--app-version</argument>" pom.xml && grep -q "<argument>$VERSION</argument>" pom.xml; then
            echo "✅ Version update completed for $VERSION"
          else
            echo "❌ Version update verification failed, restoring backup"; mv pom.xml.backup pom.xml; exit 1
          fi
          rm -f pom.xml.backup

      - name: Build with Maven (Linux)
        shell: bash
        run: |
          mvn clean install -DskipTests -Dskip.ubuntu=false -Dskip.app.image=false

      - name: Create installers (Linux)
        shell: bash
        run: |
          chmod +x package-app.sh
          ./package-app.sh

      - name: Upload build artifacts (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: PDF-Utilities-Linux-${{ needs.prepare-release.outputs.version }}
          path: target/installers/*
          retention-days: 30

  # Job 3: Create GitHub Release
  create-release:
    needs: [prepare-release, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release packages
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          mkdir -p release-packages

          echo "Processing artifacts for release..."

          # Simple approach: copy all artifacts with clean names
          for platform_dir in artifacts/*/; do
            platform=$(basename "$platform_dir")
            echo "Processing $platform artifacts..."
            
            if [ -d "$platform_dir" ]; then
              # Find all installer files and copy them with simple names
              find "$platform_dir" -type f \( -name "*.msi" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.exe" \) | while read -r file; do
                filename=$(basename "$file")
                extension="${filename##*.}"
                
                # Create simple, clean filename
                case "$platform" in
                  "PDF-Utilities-Linux"*)
                    platform_name="Linux"
                    ;;
                  "PDF-Utilities-macOS"*)
                    platform_name="macOS"
                    ;;
                  "PDF-Utilities-Windows"*)
                    platform_name="Windows"
                    ;;
                  *)
                    platform_name="$platform"
                    ;;
                esac
                
                clean_filename="PDF-Utilities-${VERSION}-${platform_name}.${extension}"
                cp "$file" "release-packages/$clean_filename"
                echo "✓ Prepared: $clean_filename"
              done
            fi
          done

          echo "Release packages prepared:"
          ls -la release-packages/

      - name: Create GitHub Release
        run: |
          # Create release notes file
          echo "${{ needs.prepare-release.outputs.release_notes }}" > release_notes.md

          # Determine if this is a prerelease
          if [ "${{ needs.prepare-release.outputs.is_prerelease }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          else
            PRERELEASE_FLAG=""
          fi

          # Create the GitHub release
          gh release create ${{ needs.prepare-release.outputs.tag_name }} \
            --title "PDF Utilities ${{ needs.prepare-release.outputs.version }}" \
            --notes-file release_notes.md \
            $PRERELEASE_FLAG \
            --latest

      - name: Upload Release Assets
        run: |
          # Upload all files in release-packages directory
          if [ -d "release-packages" ] && [ "$(ls -A release-packages)" ]; then
            echo "Uploading release assets..."
            gh release upload ${{ needs.prepare-release.outputs.tag_name }} release-packages/*
            
            if [ $? -eq 0 ]; then
              echo "✓ Successfully uploaded all release assets"
            else
              echo "✗ Failed to upload release assets"
              exit 1
            fi
          else
            echo "✗ No release packages found to upload"
            exit 1
          fi

  # Job 4: Post-release tasks
  post-release:
    needs: [prepare-release, create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update development version
        if: needs.prepare-release.outputs.is_prerelease == 'false'
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          # Extract major.minor.patch and increment patch
          IFS='.' read -r major minor patch <<< "$VERSION"
          NEW_VERSION="$major.$minor.$((patch + 1))-SNAPSHOT"

          echo "Updating development version to $NEW_VERSION"

          # Update version in pom.xml for next development cycle using targeted replacements
          cp pom.xml pom.xml.backup

          # 1) Update top-level project <version> with exact indentation to avoid plugin versions
          awk -v version="$NEW_VERSION" '
          {
              if ($0 ~ /^    <version>.*<\/version>$/) {
                  print "    <version>" version "</version>"
              } else {
                  print $0
              }
          }' pom.xml > pom.xml.tmp && mv pom.xml.tmp pom.xml

          # 2) Update <app.version> property only
          awk -v version="$NEW_VERSION" '
          {
              if ($0 ~ /^        <app\.version>.*<\/app\.version>$/) {
                  print "        <app.version>" version "</app.version>"
              } else {
                  print $0
              }
          }' pom.xml > pom.xml.tmp && mv pom.xml.tmp pom.xml

          # 3) Update jpackage --app-version argument values only inside exec-maven-plugin
          awk -v version="$NEW_VERSION" '
          BEGIN { in_plugin = 0; in_exec_plugin = 0; in_arguments = 0 }
          {
              if ($0 ~ /<plugin>/) {
                  in_plugin = 1
              } else if (in_plugin && $0 ~ /<\/plugin>/) {
                  in_plugin = 0
                  in_exec_plugin = 0
              } else if (in_plugin && $0 ~ /<artifactId>exec-maven-plugin<\/artifactId>/) {
                  in_exec_plugin = 1
              } else if (in_exec_plugin && $0 ~ /<arguments>/) {
                  in_arguments = 1
              } else if (in_exec_plugin && in_arguments && $0 ~ /<\/arguments>/) {
                  in_arguments = 0
              } else if (in_exec_plugin && in_arguments && $0 ~ /--app-version<\/argument>/) {
                  print $0
                  getline
                  print "                                <argument>" version "</argument>"
                  next
              }
              print $0
          }' pom.xml > pom.xml.tmp && mv pom.xml.tmp pom.xml

          # Clean up backup
          rm -f pom.xml.backup

          # Commit and push the version update
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pom.xml
          git commit -m "Bump version to $NEW_VERSION for next development cycle" || echo "No changes to commit"
          git push origin main || echo "Failed to push version update"

      - name: Release Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.prepare-release.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: ${{ needs.prepare-release.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY

          # Note: GitHub CLI doesn't provide the release URL in outputs like the old action did
          echo "- **Status**: Release workflow completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Downloads" >> $GITHUB_STEP_SUMMARY
          echo "Individual platform installers are available as separate download files:" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows**: MSI installer" >> $GITHUB_STEP_SUMMARY
          echo "- **macOS**: DMG installer" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux**: DEB package, RPM package, and AppImage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Release workflow completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "Each installer is uploaded as a separate file for easy download and installation." >> $GITHUB_STEP_SUMMARY
